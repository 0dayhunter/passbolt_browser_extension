/* ==============================================================================
 * Dependencies & variables
 * All the libraries and high level objects we use for this plugin
 * ==============================================================================
 */
// Our own app components
var Config = require('./model/config');

// console and debug utilities
if (Config.read('debug') == true) {
    require('sdk/preferences/service').set('extensions.sdk.console.logLevel', 'all');
}

// Content code callbacks are UUIDs generated by the content code and mapped with an anonymous
// function on the content code side. This UUID is given to the add-on code when the content code
// is triggering a request for a process managed at the addon level such as encrypt or decrypt.
// We cannot give directly the function reference since the add-on and content code can only
// communicate via text.
var callbacks = {};
exports.callbacks = callbacks;


/* ==================================================================================
 *  Interface changes
 *  Where we affect the look and feel of the firefox instance
 * ==================================================================================
 */
var tabs = require('sdk/tabs');
var buttons = require('sdk/ui/button/action');

// Add a passbolt button on browser toolbar
var button = buttons.ActionButton({
    id: 'passbolt-link',
    label: 'Passbolt',
    icon: {
        '16': './img/logo/icon-16.png',
        '32': './img/logo/icon-32.png',
        '64': './img/logo/icon-64.png'
    },
    onClick: function (state) {
        if (Config.read('baseUrl')) {
            tabs.open(Config.read('baseUrl') + '/debug');
        }
        else {
            tabs.open('http://www.passbolt.com');
        }
    }
});


/* ==================================================================================
 *  Events
 *
 *  Events help the addon code interact with content code via content/workers
 *  given by the pagemod. Read more about it here:
 *  https://developer.mozilla.org/en-US/Add-ons/SDK/Low-Level_APIs/content_worker
 *
 *  These section contain events includes that is reusable by the listeners
 *  themselves. This allows to factorize some code common to many listeners.
 *  For example multiple listeners will be will interested in sending/receiving
 *  encryption and decryption events.
 * ==================================================================================
 */
var events = {};
events.clipboard = require('./event/clipboardEvents');
events.config = require('./event/configEvents');
events.dispatch = require('./event/dispatchEvents');
events.file = require('./event/fileEvents');
events.gpgkey = require('./event/gpgkeyEvents');
events.keyring = require('./event/keyringEvents');
events.masterpassword = require('./event/masterPasswordEvents');
events.secret = require('./event/secretEvents');
events.setup = require('./event/setupEvents');
events.setup.bootstrap = require('./event/setupBootstrapEvents');
events.template = require('./event/templateEvents');
events.user = require('./event/userEvents');
exports.events = events;


/* ==================================================================================
 *  Page mods
 *  Run scripts in the context of web pages whose URL matches a given pattern.
 *  see. https://developer.mozilla.org/en-US/Add-ons/SDK/High-Level_APIs/page-mod
 * ==================================================================================
 */
// We use this variables to store the references to the pagemods
// It is usefull for example to re-initialize pagemods after a configuration changes
// for example when you change the list of domains that you are running passbolt on
var pageMods = {};
exports.pageMods = pageMods;

// Each pagemod triggers a worker that can be used to communicate between the add-on and content code.
// We need to store these workers in a global objects because they need to be able to
// communicate with each other
var workers = {};
exports.workers = workers;

/*
 * This pagemod allow inserting classes to help any page
 * to know about the status of the extension, in a modernizr fashion
 */
pageMods.addonDetection = require('./pagemod/addonDetectionPagemod').addonDetection;

/*
 * This pagemod help bootstrap the first step of the setup process from a passbolt server app page
 * The pattern for this url, driving the setup bootstrap, is defined in config.json
 */
pageMods.setupBootstrap = require('./pagemod/setupBootstrapPagemod').setupBootstrap;

/*
 * This page mod drives the reset of setup process
 * The reset of the setup process is driven on the add-on side, see in ../data/ setup.html and js/setup.js
 */
pageMods.setup = require('./pagemod/setupPagemod').setup;

/*
 * This pagemod drives the dialog/iframe where the user enters the secret key password,
 * also called master password. It is used when encrypting, decrypting, signing, etc.
 */
pageMods.masterPasswordDialog = require('./pagemod/masterPasswordDialogPagemod').masterPasswordDialog;

/*
 * This pagemod drives the progress bar iframe
 * It is used when the add-on is encrypting something
 */
pageMods.progressDialog = require('./pagemod/progressDialogPagemod').progressDialog;

/*
 * This pagemod drives the iframe used when the user enter a password to be stored by passbolt
 * It is used when creating/editing a new password
 */
pageMods.decryptDialog = require('./pagemod/decryptDialogPagemod').decryptDialog;

/*
 * This pagemod drives the main addon app
 * It is inserted in all the pages of a domain that is trusted.
 * Such trust is defined during the first step of the setup process (or in config-debug)
 */
var initPassboltAppPageMod = function () {
    pageMods.passboltApp = require('./pagemod/passboltAppPagemod').passboltApp;
};
initPassboltAppPageMod(); // init the pageMod when browser is launching
exports.initPassboltAppPageMod = initPassboltAppPageMod;

/*
 * This page mod drives a convenience config page for debug
 * This allows to not have to go through the setup process steps
 * and perform changes useful for testing that would otherwise break things
 * Like for example changing the public key only on the client but not the server
 */
pageMods.configDebug = require('./pagemod/configDebugPagemod').configDebug;
