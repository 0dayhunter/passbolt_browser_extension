/**
 * Passbolt setup step.
 */
var passbolt = passbolt || {};
passbolt.setup = passbolt.setup || {};
passbolt.setup.steps = passbolt.setup.steps || {};

(function (passbolt) {

    var step = {
        'id': 'generate_key',
        'title': 'Give us a second while we crunch them numbers!',
        'label': '',
        'parents': ['secret'],
        'next': 'backup_key',
        'defaultActions': {
            'submit': 'hidden',
            'cancel': 'hidden'
        },
        // We do not save this step in history. It should be impossible to come back to this step
        // without executing the step before first.
        'saveInHistory': true,
        'subStep': true,
        'viewData': {}
    };

    /* ==================================================================================
     *  Chainable functions
     * ================================================================================== */

    /**
     * Generate key pair.
     *
     * @param Key keyInfo
     *   see keyinfo format in Key model
     *
     * @param passphrase
     *   passphrase for the master key
     *
     * @returns Deferred {*}
     *
     * @private
     */
    step._generateKeyPair = function(keyInfo, passphrase) {
       return passbolt.request("passbolt.keyring.generateKeyPair", keyInfo, passphrase)
            .then(function(keyPair) {
               passbolt.setup.set('key.publicKeyArmored', keyPair.publicKeyArmored);
               return keyPair;
            });
    };

    /**
     * Import private key into the keyring.
     *
     * @param object keyPair
     *   key pair as generated by openpgpjs
     *
     * @returns Deferred {*}
     *
     * @private
     */
    step._importPrivateKey = function(keyPair) {
        return passbolt.request('passbolt.keyring.private.import', keyPair.privateKeyArmored)
            .then(function() {
                passbolt.setup.setActionState('submit', 'enabled');
                passbolt.setup.goForward('backup_key');
            })
    };

    /* ==================================================================================
     *  Content code events
     * ================================================================================== */

    /**
     * On key generated event.
     *
     * To be called when the key pair is generated and imported.
     */
    step.onKeyGenerated = function() {
        passbolt.setup.setActionState('submit', 'enabled');
        passbolt.setup.goForward('backup_key');
    };

    /**
     * On error.
     *
     * @param errorMsg
     */
    step.onError = function(errorMsg) {
        console.log('error while generating key', errorMsg);
        passbolt.setup.fatalError(errorMsg);
    };


    /* ==================================================================================
     *  Core functions (Implements()).
     * ================================================================================== */

    /**
     * Implements init().
     * @returns {*}
     */
     step.init = function() {
         var def = $.Deferred();
         def.resolve();
         return def;
    };

    /**
     * Implements start().
     */
    step.start = function() {
        passbolt.setup.setActionState('submit', 'processing');

        // Get key info from setup.
        passbolt.setup.get('key')
            .then(function(keyInfo) {

                // Generate key pair, and import it in keyring.
                step._generateKeyPair(keyInfo, keyInfo.passphrase)
                    .then(step._importPrivateKey)
                    .then(step.onKeyGenerated)
                    .fail(function(e) {
                        step.onError(e);
                    });
            });
    };

    /**
     * Implements submit().
     * @returns {*}
     */
    step.submit = function() {
        passbolt.setup.setActionState('submit', 'processing');
        var def = $.Deferred();
        def.resolve();
        return def;
    };

    /**
     * Implements cancel().
     * @returns {*}
     */
    step.cancel = function() {
        passbolt.setup.setActionState('cancel', 'processing');
        var def = $.Deferred();
        def.reject();
        return def;
    };

    passbolt.setup.steps[step.id] = step;

})( passbolt );
